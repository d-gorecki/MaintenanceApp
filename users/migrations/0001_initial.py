# Generated by Django 4.1.1 on 2022-11-03 14:31

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("departments", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, help_text="First name", max_length=50),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, help_text="Last name", max_length=70),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("manager", "manager"),
                            ("maintenance", "maintenance"),
                            ("production", "production"),
                        ],
                        help_text="Privileges group",
                        max_length=20,
                    ),
                ),
                (
                    "email",
                    models.EmailField(blank=True, help_text="Email", max_length=254),
                ),
                (
                    "function",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("electrican", "electrican"),
                            ("mechanic", "mechanic"),
                            ("automation_serviceman", "automation serviceman"),
                            ("maintenance_supervisor", "maintenance supervisor"),
                            ("department_supervisor", "department supervisor"),
                            ("production_worker", "production worker"),
                        ],
                        help_text="Function",
                        max_length=50,
                    ),
                ),
                (
                    "mobile",
                    models.CharField(blank=True, help_text="Mobile", max_length=12),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        help_text="Department",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="departments.department",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
